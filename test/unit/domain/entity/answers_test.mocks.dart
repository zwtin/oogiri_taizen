// Mocks generated by Mockito 5.2.0 from annotations
// in oogiri_taizen/test/unit/domain/entity/answers_test.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:oogiri_taizen/domain/entity/answer.dart' as _i3;
import 'package:oogiri_taizen/domain/entity/answers.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _Fake$AnswersCopyWith_0<$Res> extends _i1.Fake
    implements _i2.$AnswersCopyWith<$Res> {}

class _FakeAnswers_1 extends _i1.Fake implements _i2.Answers {}

/// A class which mocks [Answers].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswers extends _i1.Mock implements _i2.Answers {
  MockAnswers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  List<_i3.Answer> get list =>
      (super.noSuchMethod(Invocation.getter(#list), returnValue: <_i3.Answer>[])
          as List<_i3.Answer>);
  @override
  _i2.$AnswersCopyWith<_i2.Answers> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$AnswersCopyWith_0<_i2.Answers>())
          as _i2.$AnswersCopyWith<_i2.Answers>);
  @override
  _i2.Answers added(_i3.Answer? answer) =>
      (super.noSuchMethod(Invocation.method(#added, [answer]),
          returnValue: _FakeAnswers_1()) as _i2.Answers);
  @override
  _i2.Answers removed(_i3.Answer? answer) =>
      (super.noSuchMethod(Invocation.method(#removed, [answer]),
          returnValue: _FakeAnswers_1()) as _i2.Answers);
  @override
  _i2.Answers removedLast() =>
      (super.noSuchMethod(Invocation.method(#removedLast, []),
          returnValue: _FakeAnswers_1()) as _i2.Answers);
  @override
  _i3.Answer? getByIndex(int? index) =>
      (super.noSuchMethod(Invocation.method(#getByIndex, [index]))
          as _i3.Answer?);
  @override
  _i3.Answer? getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id])) as _i3.Answer?);
  @override
  _i2.Answers update(_i3.Answer? answer) =>
      (super.noSuchMethod(Invocation.method(#update, [answer]),
          returnValue: _FakeAnswers_1()) as _i2.Answers);
  @override
  _i2.Answers filteredBlock(
          {List<String>? blockAnswerIds,
          List<String>? blockTopicIds,
          List<String>? blockUserIds}) =>
      (super.noSuchMethod(
          Invocation.method(#filteredBlock, [], {
            #blockAnswerIds: blockAnswerIds,
            #blockTopicIds: blockTopicIds,
            #blockUserIds: blockUserIds
          }),
          returnValue: _FakeAnswers_1()) as _i2.Answers);
}
